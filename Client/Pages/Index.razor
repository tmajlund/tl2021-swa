@page "/"
@using BlazorApp.Shared
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider

<div id="start-page-div">
    <AuthorizeView>
        <Authorized>
            @if (apiResponse is null)
            {
                <p>Loading...</p>
            }
            else
            {
                <div class="card">
                    <div class="card-header">
                        <h5>Is Blazor making JavaScript obsolete?!</h5>
                    </div>
                    <div class="card-body">
                        <p class="card-text">Let us know where you stand by voting!</p>
                        <p class="card-text">Voters so far: @apiResponse.NumberOfVoters</p>
                        <a href="vote" class="btn btn-primary">Vote</a>
                    </div>
                </div>
            }
        </Authorized>
        <NotAuthorized>
            <div class="card">
                <div class="card-header">
                    <h5>Welcome to the Voting App!</h5>
                </div>
                <div class="card-body">
                    <p class="card-text">Log in to see the latest poll and vote.</p>
                    @* <a href="login" class="btn btn-primary">Log in with GitHub</a> *@
                    <a href="login" class="btn btn-dark btn-block btn-social btn-github">
                        <span class="fa fa-github"></span> Sign in with GitHub
                    </a>
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>


@code {
    private ApiResponse apiResponse;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            await GetVotings();
        }
    }

    private async Task VoteYes()
    {
        var vote = new NewVote
        {
            VoteId = "1",
            Timestamp = DateTimeOffset.UtcNow,
            Vote = "yes"
        };

        await HttpClient.PostAsJsonAsync("api/PostVoting", vote);
    }

    private async Task VoteNo()
    {
        var vote = new NewVote
        {
            VoteId = "1",
            Timestamp = DateTimeOffset.UtcNow,
            Vote = "no"
        };

        await HttpClient.PostAsJsonAsync("api/PostVoting", vote);
    }

    private async Task GetVotings()
    {
        apiResponse = await HttpClient.GetFromJsonAsync<ApiResponse>("api/GetVoting");
    }
}