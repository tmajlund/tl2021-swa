@page "/statistics"
@using BlazorApp.Shared
@using System.Timers
@using Microsoft.AspNetCore.Authorization
@inject HttpClient HttpClient
@attribute [Authorize]

<h1>Statistics</h1>

@if (apiResponse is null)
{
    <p>Loading...</p>
}
else
{
    <p>Number of voters: @apiResponse.NumberOfVoters</p>
    <p>Number of yes: @apiResponse.NumberOfYes</p>
    <p>Number of no: @apiResponse.NumberOfNo</p>

    <p>Yes @((int)Math.Round((double)(100 * apiResponse.NumberOfYes) / apiResponse.NumberOfVoters))%: @for (int i = 0; i < apiResponse.NumberOfYes; i++)
    {
        <span>#</span>
    }
    </p>
    <p>No @((int)Math.Round((double)(100 * apiResponse.NumberOfNo) / apiResponse.NumberOfVoters))%: @for (int i = 0; i < apiResponse.NumberOfNo; i++)
    {
        <span>#</span>
    }
    </p>
    <br>
    <br>

    <div style="width: 300px">
    <div class="semi-donut"
            style="--percentage : @(percentageYes)%; --fill: #039BE5 ;">
        Blazor
    </div>
    <div>
        <p class="align-left">Yes</p>
        <p class="align-right">No</p>
    </div>
</div>
}

@code{
    private ApiResponse apiResponse;
    private int percentageYes;
    private Timer timer;

    protected override void OnInitialized()
    {
        timer = new Timer(2000);
        timer.AutoReset = true;
        timer.Elapsed += new ElapsedEventHandler(OnTimedEvent);
        timer.Start();
    }
    
    private async void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        apiResponse = await HttpClient.GetFromJsonAsync<ApiResponse>("api/GetVoting");
        percentageYes = (int)Math.Round((double)(100 * apiResponse.NumberOfYes) / apiResponse.NumberOfVoters);
        await InvokeAsync(() => 
        {
            StateHasChanged();
        });
    }
}